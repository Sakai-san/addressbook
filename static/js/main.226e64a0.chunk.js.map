{"version":3,"sources":["ducks/Home/types.ts","ducks/Home/reducers.ts","ducks/Settings/types.ts","ducks/Home/actions.ts","ducks/Home/operations.ts","ducks/Home/index.ts","ducks/Settings/reducers.ts","ducks/Search/types.ts","ducks/Settings/actions.ts","ducks/Settings/operations.ts","ducks/Settings/index.ts","ducks/Search/reducers.ts","ducks/Search/index.ts","Row.tsx","ducks/Search/actions.ts","ducks/Search/SearchComponent.tsx","ducks/Home/HomeComponent.tsx","ducks/Settings/SettingsComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["actionTypes","isLoading","type","FETCHING_USERS","payload","data","FETCH_USERS","page","nationality","amountOfRows","dispatch","actions","fetch","then","r","json","results","homeReducer","state","users","isFetching","action","SET_NATIONALITY","settingsReducer","searchReducer","terms","SEARCH_SEARCH","first","last","doPlaceAtBottom","element","Math","max","document","documentElement","clientWidth","window","innerWidth","getBoundingClientRect","top","distanceFromViewportTop","Row","user","style","rowRef","useRef","modalRef","useState","isModalVisible","setIsModalVisible","useEffect","current","classList","add","ref","className","onClick","e","src","picture","thumbnail","alt","name","login","username","email","stopPropagation","location","street","number","postcode","city","phone","cell","search","SearchComponent","firstNameRef","lastNameRef","useDispatch","onSubmit","preventDefault","value","placeholder","HomeComponent","isSearchActive","useSelector","searchTems","filter","toUpperCase","filterUsers","home","settings","loadMoreRows","startIndex","stopIndex","Promise","resolve","homeOperations","rowRenderer","key","index","to","isRowLoaded","rowCount","onRowsRendered","registerChild","height","width","ROW_HEIGHT","length","rowHeight","NATIONALIIES","SettingsComponent","nationalitySet","onChangeHandler","settingsOperations","target","map","checked","onChange","App","path","Boolean","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","ducks","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.226e64a0.chunk.js","sourcesContent":["export enum actionTypes {\n  FETCH_USERS = \"@USERS/fetch\",\n  FETCHING_USERS = \"@USERS/fetching\",\n}\n\nexport interface IUser {\n  gender?: string;\n  name?: {\n    title?: string;\n    first?: string;\n    last?: string;\n  };\n  location?: {\n    street?: {\n      number?: number;\n      name?: string;\n    };\n    city?: string;\n    state?: string;\n    country?: string;\n    postcode?: number;\n    coordinates?: {\n      latitude?: string;\n      longitude?: string;\n    };\n    timezone?: {\n      offset?: string;\n      description?: string;\n    };\n  };\n  email?: string;\n  login?: {\n    uuid?: string;\n    username?: string;\n    password?: string;\n    salt?: string;\n    md5?: string;\n    sha1?: string;\n    sha256?: string;\n  };\n  dob?: {\n    date?: string;\n    age?: number;\n  };\n  registered?: {\n    date?: string;\n    age?: number;\n  };\n  phone?: string;\n  cell?: string;\n  id?: {\n    name?: string;\n    value?: string;\n  };\n  picture?: {\n    large?: string;\n    medium?: string;\n    thumbnail?: string;\n  };\n  nat?: string;\n}\n\nexport interface IHomeStore {\n  users: IUser[];\n  isFetching: boolean;\n}\n\nexport interface IActionFetching {\n  type: actionTypes;\n  payload: boolean;\n}\n\nexport interface IActionFetch {\n  type: actionTypes;\n  payload: IUser[];\n}\n","import { Reducer } from \"redux\";\nimport { actionTypes, IHomeStore } from \"./types\";\nimport actions from \"./actions\";\n\nconst reducer: Reducer<\n  IHomeStore,\n  ReturnType<typeof actions.makeUserFectch | typeof actions.makeUserFectching>\n> = (\n  state = {\n    users: [],\n    isFetching: false,\n  },\n  action\n) => {\n  if (action.type === actionTypes.FETCHING_USERS) {\n    return {\n      ...state,\n      isFetching: action.payload,\n    };\n  } else if (action.type === actionTypes.FETCH_USERS) {\n    return {\n      users: [...state.users, ...action.payload],\n      isFetching: false,\n    };\n  } else {\n    return state;\n  }\n};\n\nexport default reducer;\n","export enum actionTypes {\n  SET_NATIONALITY = \"@USERS/setNationality\",\n}\n\nexport type TypeSettingsStore = string;\n\nexport interface IAction {\n  type: actionTypes;\n  payload: string;\n}\n","import { actionTypes } from \"./types\";\n\nconst makeUserFectch = (data: any) => ({\n  type: actionTypes.FETCH_USERS,\n  payload: data,\n});\n\nconst makeUserFectching = (isLoading: boolean) => ({\n  type: actionTypes.FETCHING_USERS,\n  payload: isLoading,\n});\n\nexport default {\n  makeUserFectching,\n  makeUserFectch,\n};\n","import { Dispatch } from \"redux\";\nimport actions from \"./actions\";\n\nconst fetchUsers = (\n  page: number,\n  nationality: string,\n  amountOfRows: number\n) => (dispatch: Dispatch) => {\n  dispatch(actions.makeUserFectching(true));\n\n  fetch(\n    `https://randomuser.me/api/?nat=${nationality}&page=${page}&results=${amountOfRows}`\n  )\n    .then((r) => r.json())\n    .then((data) => dispatch(actions.makeUserFectch(data.results)));\n};\n\nexport default { fetchUsers };\n","import homeReducer from \"./reducers\";\nexport { default as homeOperations } from \"./operations\";\nexport default homeReducer;\n","import { Reducer } from \"redux\";\nimport { actionTypes, TypeSettingsStore } from \"./types\";\nimport actions from \"./actions\";\n\nconst reducer: Reducer<\n  TypeSettingsStore,\n  ReturnType<typeof actions.makeSetNationality>\n> = (state = \"ch\", action) => {\n  if (action.type === actionTypes.SET_NATIONALITY) {\n    return action.payload;\n  } else {\n    return state;\n  }\n};\n\nexport default reducer;\n","export enum actionTypes {\n  SEARCH_SEARCH = \"@SEARCH/search\",\n}\n\nexport interface ISearchTerms {\n  first: string | undefined;\n  last: string | undefined;\n}\n\nexport interface ISearchStore {\n  terms: ISearchTerms | null;\n}\nexport interface IAction {\n  type: actionTypes;\n  payload: ISearchTerms;\n}\n","import { actionTypes } from \"./types\";\n\nconst makeSetNationality = (nationality: string) => ({\n  type: actionTypes.SET_NATIONALITY,\n  payload: nationality,\n});\n\nexport default {\n  makeSetNationality,\n};\n","import { Dispatch } from \"redux\";\nimport actions from \"./actions\";\n\nconst setNationality = (nationality: string) => (dispatch: Dispatch) =>\n  dispatch(actions.makeSetNationality(nationality));\n\nexport default { setNationality };\n","import settingsReducer from \"./reducers\";\nexport { default as settingsOperations } from \"./operations\";\nexport default settingsReducer;\n","import { Reducer } from \"redux\";\nimport { actionTypes, ISearchStore } from \"./types\";\nimport actions from \"./actions\";\n\nconst reducer: Reducer<ISearchStore, ReturnType<typeof actions.makeSearch>> = (\n  state = {\n    terms: null,\n  },\n  action\n) => {\n  if (action.type === actionTypes.SEARCH_SEARCH) {\n    return {\n      ...state,\n      terms: action?.payload\n        ? {\n            first: action.payload.first,\n            last: action.payload.last,\n          }\n        : action.payload,\n    };\n  } else {\n    return state;\n  }\n};\n\nexport default reducer;\n","import searchReducer from \"./reducers\";\nexport default searchReducer;\n","import React, {\n  FunctionComponent,\n  MouseEvent,\n  useState,\n  useRef,\n  useEffect,\n} from \"react\";\nimport { IUser } from \"./ducks/Home/types\";\n\nimport \"./Row.css\";\n\ninterface IRowProps {\n  user: IUser;\n  style: object;\n}\n\nconst getViewportHeight = () =>\n  Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\n\nconst distanceFromViewportTop = (element: HTMLElement) =>\n  element.getBoundingClientRect().top;\n\nconst doPlaceAtBottom = (element: HTMLElement) =>\n  getViewportHeight() / 2 < distanceFromViewportTop(element) ? true : false;\n\nconst Row: FunctionComponent<IRowProps> = ({ user, style }) => {\n  const rowRef = useRef<HTMLDivElement>(null);\n  const modalRef = useRef<HTMLDivElement>(null);\n  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\n\n  const clickRowlHandler = (e: MouseEvent<HTMLElement>) =>\n    setIsModalVisible(true);\n\n  const clickModalHandler = (e: MouseEvent<HTMLElement>) => {\n    e.stopPropagation();\n    setIsModalVisible(false);\n  };\n\n  useEffect(() => {\n    if (rowRef?.current && doPlaceAtBottom(rowRef.current)) {\n      modalRef?.current?.classList?.add?.(\"ModalBotton\");\n    } else {\n      modalRef?.current?.classList?.add?.(\"ModalTop\");\n    }\n  });\n\n  return (\n    <div ref={rowRef} className=\"Row\" style={style} onClick={clickRowlHandler}>\n      <img\n        src={user?.picture?.thumbnail}\n        alt={`${user?.name?.first} ${user?.name?.last}`}\n      />\n      <div>{user?.name?.first}</div>\n      <div>{user?.name?.last}</div>\n      <div>{user?.login?.username}</div>\n      <div>{user?.email}</div>\n      {isModalVisible && (\n        <div ref={modalRef} className=\"Modal\">\n          <span className=\"Close\" onClick={clickModalHandler}>\n            &#10008;\n          </span>\n          <div className=\"ModalContent\">\n            <div>\n              {user?.location?.street?.number}, {user?.location?.street?.name}\n            </div>\n            <div>\n              {user?.location?.postcode}, {user?.location?.city}\n            </div>\n            <div>{user?.location?.state}</div>\n            <div>{user?.phone}</div>\n            <div>{user?.cell}</div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Row;\n","import { actionTypes, ISearchTerms } from \"./types\";\n\nconst makeSearch = (search: ISearchTerms | null) => ({\n  type: actionTypes.SEARCH_SEARCH,\n  payload: search,\n});\n\nexport default {\n  makeSearch,\n};\n","import React, { FunctionComponent, useRef, FormEvent, MouseEvent } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport actions from \"./actions\";\n\nimport \"./SearchComponent.css\";\n\nconst SearchComponent: FunctionComponent = () => {\n  const firstNameRef = useRef<HTMLInputElement>(null);\n  const lastNameRef = useRef<HTMLInputElement>(null);\n\n  const dispatch = useDispatch();\n\n  const onSubmitHandler = (e: FormEvent) => {\n    e.preventDefault();\n\n    dispatch(\n      actions.makeSearch({\n        first: firstNameRef?.current?.value,\n        last: lastNameRef?.current?.value,\n      })\n    );\n  };\n\n  const onResetHandler = (e: any | MouseEvent<HTMLElement>) =>\n    dispatch(actions.makeSearch(null));\n\n  return (\n    <form className=\"SearchComponent\" onSubmit={onSubmitHandler}>\n      <div>\n        <input ref={firstNameRef} placeholder=\"first name\" />\n      </div>\n      <div>\n        <input ref={lastNameRef} placeholder=\"last name\" />\n      </div>\n      <button type=\"submit\">Search</button>\n      <button onClick={onResetHandler} type=\"reset\">\n        Reset\n      </button>\n    </form>\n  );\n};\n\nexport default SearchComponent;\n","import React, { FunctionComponent, useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { InfiniteLoader, List, AutoSizer } from \"react-virtualized\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Row from \"../../Row\";\nimport SearchComponent from \"../Search/SearchComponent\";\nimport { homeOperations } from \"./index\";\nimport { IUser } from \"./types\";\nimport { ISearchTerms } from \"../Search/types\";\nimport { IReduxStore } from \"../../reduxStoreType\";\n\nimport \"./HomeComponent.css\";\nimport \"react-virtualized/styles.css\"; // only needs to be imported once\n\nconst BATCH_ROW = 50;\nconst AMOUNT_OF_VISIBLE_ROWS = 10;\nconst ROW_HEIGHT = 50;\n\nconst filterUsers = (users: IUser[], searchTems: ISearchTerms | null) =>\n  users.filter(\n    (user) =>\n      user?.name?.first?.toUpperCase?.() ===\n        searchTems?.first?.toUpperCase?.() &&\n      user?.name?.last?.toUpperCase?.() === searchTems?.last?.toUpperCase?.()\n  );\n\nconst HomeComponent: FunctionComponent = () => {\n  const page = useRef<number>(-1);\n  const isSearchActive = useSelector(\n    (state: IReduxStore) => state.search.terms\n  );\n  const users = useSelector((state: IReduxStore) =>\n    !isSearchActive\n      ? state.home.users\n      : filterUsers(state.home.users, state.search.terms)\n  );\n  const isFetching = useSelector((state: IReduxStore) => state.home.isFetching);\n  const nationality = useSelector((state: IReduxStore) => state.settings);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    loadMoreRows({});\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const isRowLoaded = ({ index }: any) => !!users[index];\n\n  const loadMoreRows = ({ startIndex, stopIndex }: any) => {\n    page.current = page.current + 1;\n    return Promise.resolve(\n      dispatch(homeOperations.fetchUsers(page.current, nationality, BATCH_ROW))\n    );\n  };\n\n  const rowRenderer = ({ key, index, style }: any) => (\n    <Row key={key} user={users[index]} style={style} />\n  );\n\n  return (\n    <div>\n      <div className=\"Sticky\">\n        <SearchComponent />\n      </div>\n      <div className=\"LinkToSettings\">\n        <Link to=\"/settings\">Settings</Link>\n      </div>\n\n      {isSearchActive && (\n        <div className=\"LoadingSuspended\">\n          Infinite loader is disabled while the search is in use &#129302;\n        </div>\n      )}\n      {!isSearchActive && isFetching && (\n        <div className=\"Loading\">Loading... &#9203;</div>\n      )}\n\n      <InfiniteLoader\n        isRowLoaded={isRowLoaded}\n        loadMoreRows={loadMoreRows}\n        rowCount={1000}\n      >\n        {({ onRowsRendered, registerChild }) => (\n          <AutoSizer>\n            {({ height, width }) => (\n              <List\n                width={width}\n                height={ROW_HEIGHT * AMOUNT_OF_VISIBLE_ROWS}\n                onRowsRendered={onRowsRendered}\n                ref={registerChild}\n                rowCount={users.length}\n                rowHeight={ROW_HEIGHT}\n                rowRenderer={rowRenderer}\n              />\n            )}\n          </AutoSizer>\n        )}\n      </InfiniteLoader>\n    </div>\n  );\n};\n\nexport default HomeComponent;\n","import React, { FunctionComponent, ChangeEvent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { settingsOperations } from \"./index\";\nimport { IReduxStore } from \"../../reduxStoreType\";\n\nconst NATIONALIIES = [\"ch\", \"es\", \"fr\", \"gb\"];\n\nconst SettingsComponent: FunctionComponent = () => {\n  const dispatch = useDispatch();\n  const nationalitySet = useSelector((state: IReduxStore) => state.settings);\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) =>\n    dispatch(settingsOperations.setNationality(e.target.value));\n\n  return (\n    <div>\n      <Link to=\"/\">Home</Link>\n\n      <p>Select the nationality you want the search to done in. </p>\n\n      {NATIONALIIES.map((nationality) => (\n        <div key={nationality}>\n          <label>\n            {nationality.toUpperCase()}\n            <input\n              type=\"radio\"\n              name=\"nationality\"\n              value={nationality}\n              checked={nationality === nationalitySet}\n              onChange={onChangeHandler}\n            />\n          </label>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default SettingsComponent;\n","import React, { FunctionComponent } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport HomeComponent from \"./ducks/Home/HomeComponent\";\nimport SettingsComponent from \"./ducks/Settings/SettingsComponent\";\n\nimport \"./App.css\";\n\nconst App: FunctionComponent = () => (\n  <div className=\"Wrapper\">\n    <Router>\n      <Switch>\n        <Route path=\"/settings\">\n          <SettingsComponent />\n        </Route>\n        <Route path=\"/\">\n          <HomeComponent />\n        </Route>\n      </Switch>\n    </Router>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { compose, createStore, applyMiddleware, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport * as ducks from \"./ducks/index\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  combineReducers(ducks),\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}